{"ast":null,"code":"var _jsxFileName = \"/Users/youngha/Udemy/React/useMemo-useCallback/src/UseCallbackEx1.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useCallback } from \"react\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CallbackEX1 = () => {\n  _s();\n\n  const [number, setNumber] = useState(0);\n\n  const someFunction = () => {\n    console.log(`someFunc: number: ${number}`);\n    return;\n  };\n\n  useEffect(() => {\n    console.log('somefunction이 변경되었습니다.');\n  }, [someFunction]); //useEffect를 사용하면, someFunction은 함수 객체이기 때문에, 재선언될 때마다 다른 주소를 참조하기 때문에,\n  //someFunction이 갱신되었다고 인식하여 매번, console.log출력한다. \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: number,\n      onChange: e => setNumber(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: someFunction,\n      children: \" Call someFunction \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CallbackEX1, \"X5OXjcJA8VN2NFdeCwiPCLThJB0=\");\n\n_c = CallbackEX1;\nexport default CallbackEX1;\n\nvar _c;\n\n$RefreshReg$(_c, \"CallbackEX1\");","map":{"version":3,"names":["useEffect","useState","useCallback","React","CallbackEX1","number","setNumber","someFunction","console","log","e","target","value"],"sources":["/Users/youngha/Udemy/React/useMemo-useCallback/src/UseCallbackEx1.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useCallback } from \"react\";\nimport React from 'react';\n\nconst CallbackEX1 = () => {\n  const [number, setNumber] = useState(0);\n\n  const someFunction = () => {\n    console.log(`someFunc: number: ${number}`);\n    return ; \n  };\n\n  useEffect(()=>{\n    console.log('somefunction이 변경되었습니다.')\n  }, [someFunction]);\n  //useEffect를 사용하면, someFunction은 함수 객체이기 때문에, 재선언될 때마다 다른 주소를 참조하기 때문에,\n  //someFunction이 갱신되었다고 인식하여 매번, console.log출력한다. \n\n  return (\n    <div>\n        <input\n        type = 'number'\n        value = {number}\n        onChange={(e) => setNumber(e.target.value)}\n        />\n    \n        <br/>\n        <button onClick = {someFunction}> Call someFunction </button>\n    </div>\n  );\n\n\n}\n\nexport default CallbackEX1;"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,CAAD,CAApC;;EAEA,MAAMM,YAAY,GAAG,MAAM;IACzBC,OAAO,CAACC,GAAR,CAAa,qBAAoBJ,MAAO,EAAxC;IACA;EACD,CAHD;;EAKAL,SAAS,CAAC,MAAI;IACZQ,OAAO,CAACC,GAAR,CAAY,wBAAZ;EACD,CAFQ,EAEN,CAACF,YAAD,CAFM,CAAT,CARwB,CAWxB;EACA;;EAEA,oBACE;IAAA,wBACI;MACA,IAAI,EAAG,QADP;MAEA,KAAK,EAAIF,MAFT;MAGA,QAAQ,EAAGK,CAAD,IAAOJ,SAAS,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV;IAH1B;MAAA;MAAA;MAAA;IAAA,QADJ,eAOI;MAAA;MAAA;MAAA;IAAA,QAPJ,eAQI;MAAQ,OAAO,EAAIL,YAAnB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CA5BD;;GAAMH,W;;KAAAA,W;AA8BN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}