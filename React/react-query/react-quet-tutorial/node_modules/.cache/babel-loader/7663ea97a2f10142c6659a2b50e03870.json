{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport removeAccents from 'remove-accents';\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nmatchSorter.rankings = rankings;\n\nvar defaultBaseSortFn = function defaultBaseSortFn(a, b) {\n  return String(a.rankedValue).localeCompare(String(b.rankedValue));\n};\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\n\n\nfunction matchSorter(items, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      keys = _options.keys,\n      _options$threshold = _options.threshold,\n      threshold = _options$threshold === void 0 ? rankings.MATCHES : _options$threshold,\n      _options$baseSort = _options.baseSort,\n      baseSort = _options$baseSort === void 0 ? defaultBaseSortFn : _options$baseSort,\n      _options$sorter = _options.sorter,\n      sorter = _options$sorter === void 0 ? function (matchedItems) {\n    return matchedItems.sort(function (a, b) {\n      return sortRankedValues(a, b, baseSort);\n    });\n  } : _options$sorter;\n  var matchedItems = items.reduce(reduceItemsToRanked, []);\n  return sorter(matchedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n\n  function reduceItemsToRanked(matches, item, index) {\n    var rankingInfo = getHighestRanking(item, keys, value, options);\n    var rank = rankingInfo.rank,\n        _rankingInfo$keyThres = rankingInfo.keyThreshold,\n        keyThreshold = _rankingInfo$keyThres === void 0 ? threshold : _rankingInfo$keyThres;\n\n    if (rank >= keyThreshold) {\n      matches.push(_extends({}, rankingInfo, {\n        item: item,\n        index: index\n      }));\n    }\n\n    return matches;\n  }\n}\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\n\n\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    var stringItem = item;\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: stringItem,\n      rank: getMatchRanking(stringItem, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        rankedValue = _ref2.rankedValue,\n        keyIndex = _ref2.keyIndex,\n        keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n    var newRank = getMatchRanking(itemValue, value, options);\n    var newRankedValue = rankedValue;\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking,\n        threshold = attributes.threshold;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n      newRankedValue = itemValue;\n    }\n\n    return {\n      rankedValue: newRankedValue,\n      rank: rank,\n      keyIndex: keyIndex,\n      keyThreshold: keyThreshold\n    };\n  }, {\n    rankedValue: item,\n    rank: rankings.NO_MATCH,\n    keyIndex: -1,\n    keyThreshold: options.threshold\n  });\n}\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\n\n\nfunction getMatchRanking(testString, stringToRank, options) {\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\n\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  } // case sensitive equals\n\n\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  } // Lower casing before further comparison\n\n\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.EQUAL;\n  } // starts with\n\n\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH;\n  } // word starts with\n\n\n  if (testString.includes(\" \" + stringToRank)) {\n    return rankings.WORD_STARTS_WITH;\n  } // contains\n\n\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  } // acronym\n\n\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM;\n  } // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n\n\n  return getClosenessRanking(testString, stringToRank);\n}\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\n\n\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\n\n\nfunction getClosenessRanking(testString, stringToRank) {\n  var matchingInOrderCharCount = 0;\n  var charNumber = 0;\n\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index, J = string.length; j < J; j++) {\n      var stringChar = string[j];\n\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1;\n        return j + 1;\n      }\n    }\n\n    return -1;\n  }\n\n  function getRanking(spread) {\n    var spreadPercentage = 1 / spread;\n    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n    var ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n    return ranking;\n  }\n\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n\n  charNumber = firstIndex;\n\n  for (var i = 1, I = stringToRank.length; i < I; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\n\n\nfunction sortRankedValues(a, b, baseSort) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n      aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n      bKeyIndex = b.keyIndex;\n  var same = aRank === bRank;\n\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      // use the base sort function as a tie-breaker\n      return baseSort(a, b);\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\n\n\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics; // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n\n  value = \"\" + value; // toString\n\n  if (!keepDiacritics) {\n    value = removeAccents(value);\n  }\n\n  return value;\n}\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\n\n\nfunction getItemValues(item, key) {\n  if (typeof key === 'object') {\n    key = key.key;\n  }\n\n  var value;\n\n  if (typeof key === 'function') {\n    value = key(item);\n  } else if (item == null) {\n    value = null;\n  } else if (Object.hasOwnProperty.call(item, key)) {\n    value = item[key];\n  } else if (key.includes('.')) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return getNestedValues(key, item);\n  } else {\n    value = null;\n  } // because `value` can also be undefined\n\n\n  if (value == null) {\n    return [];\n  }\n\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return [String(value)];\n}\n/**\n * Given path: \"foo.bar.baz\"\n * And item: {foo: {bar: {baz: 'buzz'}}}\n *   -> 'buzz'\n * @param path a dot-separated set of keys\n * @param item the item to get the value from\n */\n\n\nfunction getNestedValues(path, item) {\n  var keys = path.split('.');\n  var values = [item];\n\n  for (var i = 0, I = keys.length; i < I; i++) {\n    var nestedKey = keys[i];\n    var nestedValues = [];\n\n    for (var j = 0, J = values.length; j < J; j++) {\n      var nestedItem = values[j];\n      if (nestedItem == null) continue;\n\n      if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {\n        var nestedValue = nestedItem[nestedKey];\n\n        if (nestedValue != null) {\n          nestedValues.push(nestedValue);\n        }\n      } else if (nestedKey === '*') {\n        // ensure that values is an array\n        nestedValues = nestedValues.concat(nestedItem);\n      }\n    }\n\n    values = nestedValues;\n  }\n\n  if (Array.isArray(values[0])) {\n    // keep allowing the implicit wildcard for an array of strings at the end of\n    // the path; don't use `.flat()` because that's not available in node.js v10\n    var result = [];\n    return result.concat.apply(result, values);\n  } // Based on our logic it should be an array of strings by now...\n  // assuming the user's path terminated in strings\n\n\n  return values;\n}\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\n\n\nfunction getAllValuesToRank(item, keys) {\n  var allValues = [];\n\n  for (var j = 0, J = keys.length; j < J; j++) {\n    var key = keys[j];\n    var attributes = getKeyAttributes(key);\n    var itemValues = getItemValues(item, key);\n\n    for (var i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i],\n        attributes: attributes\n      });\n    }\n  }\n\n  return allValues;\n}\n\nvar defaultKeyAttributes = {\n  maxRanking: Infinity,\n  minRanking: -Infinity\n};\n/**\n * Gets all the attributes for the given key\n * @param key - the key from which the attributes will be retrieved\n * @return object containing the key's attributes\n */\n\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    return defaultKeyAttributes;\n  }\n\n  return _extends({}, defaultKeyAttributes, key);\n}\n/*\neslint\n  no-continue: \"off\",\n*/\n\n\nexport { defaultBaseSortFn, matchSorter, rankings };","map":{"version":3,"names":["_extends","removeAccents","rankings","CASE_SENSITIVE_EQUAL","EQUAL","STARTS_WITH","WORD_STARTS_WITH","CONTAINS","ACRONYM","MATCHES","NO_MATCH","matchSorter","defaultBaseSortFn","a","b","String","rankedValue","localeCompare","items","value","options","_options","keys","_options$threshold","threshold","_options$baseSort","baseSort","_options$sorter","sorter","matchedItems","sort","sortRankedValues","reduce","reduceItemsToRanked","map","_ref","item","matches","index","rankingInfo","getHighestRanking","rank","_rankingInfo$keyThres","keyThreshold","push","stringItem","getMatchRanking","keyIndex","valuesToRank","getAllValuesToRank","_ref2","_ref3","i","itemValue","attributes","newRank","newRankedValue","minRanking","maxRanking","testString","stringToRank","prepareValueForComparison","length","toLowerCase","startsWith","includes","getAcronym","getClosenessRanking","string","acronym","wordsInString","split","forEach","wordInString","splitByHyphenWords","splitByHyphenWord","substr","matchingInOrderCharCount","charNumber","findMatchingCharacter","matchChar","j","J","stringChar","getRanking","spread","spreadPercentage","inOrderPercentage","ranking","firstIndex","I","found","aFirst","bFirst","aRank","aKeyIndex","bRank","bKeyIndex","same","_ref4","keepDiacritics","getItemValues","key","Object","hasOwnProperty","call","getNestedValues","Array","isArray","path","values","nestedKey","nestedValues","nestedItem","nestedValue","concat","result","apply","allValues","getKeyAttributes","itemValues","defaultKeyAttributes","Infinity"],"sources":["/Users/youngha/Personal Study/React/react-query/node_modules/match-sorter/dist/match-sorter.esm.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport removeAccents from 'remove-accents';\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nmatchSorter.rankings = rankings;\n\nvar defaultBaseSortFn = function defaultBaseSortFn(a, b) {\n  return String(a.rankedValue).localeCompare(String(b.rankedValue));\n};\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\n\n\nfunction matchSorter(items, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      keys = _options.keys,\n      _options$threshold = _options.threshold,\n      threshold = _options$threshold === void 0 ? rankings.MATCHES : _options$threshold,\n      _options$baseSort = _options.baseSort,\n      baseSort = _options$baseSort === void 0 ? defaultBaseSortFn : _options$baseSort,\n      _options$sorter = _options.sorter,\n      sorter = _options$sorter === void 0 ? function (matchedItems) {\n    return matchedItems.sort(function (a, b) {\n      return sortRankedValues(a, b, baseSort);\n    });\n  } : _options$sorter;\n  var matchedItems = items.reduce(reduceItemsToRanked, []);\n  return sorter(matchedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n\n  function reduceItemsToRanked(matches, item, index) {\n    var rankingInfo = getHighestRanking(item, keys, value, options);\n    var rank = rankingInfo.rank,\n        _rankingInfo$keyThres = rankingInfo.keyThreshold,\n        keyThreshold = _rankingInfo$keyThres === void 0 ? threshold : _rankingInfo$keyThres;\n\n    if (rank >= keyThreshold) {\n      matches.push(_extends({}, rankingInfo, {\n        item: item,\n        index: index\n      }));\n    }\n\n    return matches;\n  }\n}\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\n\n\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    var stringItem = item;\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: stringItem,\n      rank: getMatchRanking(stringItem, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        rankedValue = _ref2.rankedValue,\n        keyIndex = _ref2.keyIndex,\n        keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n    var newRank = getMatchRanking(itemValue, value, options);\n    var newRankedValue = rankedValue;\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking,\n        threshold = attributes.threshold;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n      newRankedValue = itemValue;\n    }\n\n    return {\n      rankedValue: newRankedValue,\n      rank: rank,\n      keyIndex: keyIndex,\n      keyThreshold: keyThreshold\n    };\n  }, {\n    rankedValue: item,\n    rank: rankings.NO_MATCH,\n    keyIndex: -1,\n    keyThreshold: options.threshold\n  });\n}\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\n\n\nfunction getMatchRanking(testString, stringToRank, options) {\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\n\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  } // case sensitive equals\n\n\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  } // Lower casing before further comparison\n\n\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.EQUAL;\n  } // starts with\n\n\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH;\n  } // word starts with\n\n\n  if (testString.includes(\" \" + stringToRank)) {\n    return rankings.WORD_STARTS_WITH;\n  } // contains\n\n\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  } // acronym\n\n\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM;\n  } // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n\n\n  return getClosenessRanking(testString, stringToRank);\n}\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\n\n\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\n\n\nfunction getClosenessRanking(testString, stringToRank) {\n  var matchingInOrderCharCount = 0;\n  var charNumber = 0;\n\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index, J = string.length; j < J; j++) {\n      var stringChar = string[j];\n\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1;\n        return j + 1;\n      }\n    }\n\n    return -1;\n  }\n\n  function getRanking(spread) {\n    var spreadPercentage = 1 / spread;\n    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n    var ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n    return ranking;\n  }\n\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n\n  charNumber = firstIndex;\n\n  for (var i = 1, I = stringToRank.length; i < I; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\n\n\nfunction sortRankedValues(a, b, baseSort) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n      aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n      bKeyIndex = b.keyIndex;\n  var same = aRank === bRank;\n\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      // use the base sort function as a tie-breaker\n      return baseSort(a, b);\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\n\n\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n  // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = \"\" + value; // toString\n\n  if (!keepDiacritics) {\n    value = removeAccents(value);\n  }\n\n  return value;\n}\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\n\n\nfunction getItemValues(item, key) {\n  if (typeof key === 'object') {\n    key = key.key;\n  }\n\n  var value;\n\n  if (typeof key === 'function') {\n    value = key(item);\n  } else if (item == null) {\n    value = null;\n  } else if (Object.hasOwnProperty.call(item, key)) {\n    value = item[key];\n  } else if (key.includes('.')) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return getNestedValues(key, item);\n  } else {\n    value = null;\n  } // because `value` can also be undefined\n\n\n  if (value == null) {\n    return [];\n  }\n\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return [String(value)];\n}\n/**\n * Given path: \"foo.bar.baz\"\n * And item: {foo: {bar: {baz: 'buzz'}}}\n *   -> 'buzz'\n * @param path a dot-separated set of keys\n * @param item the item to get the value from\n */\n\n\nfunction getNestedValues(path, item) {\n  var keys = path.split('.');\n  var values = [item];\n\n  for (var i = 0, I = keys.length; i < I; i++) {\n    var nestedKey = keys[i];\n    var nestedValues = [];\n\n    for (var j = 0, J = values.length; j < J; j++) {\n      var nestedItem = values[j];\n      if (nestedItem == null) continue;\n\n      if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {\n        var nestedValue = nestedItem[nestedKey];\n\n        if (nestedValue != null) {\n          nestedValues.push(nestedValue);\n        }\n      } else if (nestedKey === '*') {\n        // ensure that values is an array\n        nestedValues = nestedValues.concat(nestedItem);\n      }\n    }\n\n    values = nestedValues;\n  }\n\n  if (Array.isArray(values[0])) {\n    // keep allowing the implicit wildcard for an array of strings at the end of\n    // the path; don't use `.flat()` because that's not available in node.js v10\n    var result = [];\n    return result.concat.apply(result, values);\n  } // Based on our logic it should be an array of strings by now...\n  // assuming the user's path terminated in strings\n\n\n  return values;\n}\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\n\n\nfunction getAllValuesToRank(item, keys) {\n  var allValues = [];\n\n  for (var j = 0, J = keys.length; j < J; j++) {\n    var key = keys[j];\n    var attributes = getKeyAttributes(key);\n    var itemValues = getItemValues(item, key);\n\n    for (var i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i],\n        attributes: attributes\n      });\n    }\n  }\n\n  return allValues;\n}\n\nvar defaultKeyAttributes = {\n  maxRanking: Infinity,\n  minRanking: -Infinity\n};\n/**\n * Gets all the attributes for the given key\n * @param key - the key from which the attributes will be retrieved\n * @return object containing the key's attributes\n */\n\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    return defaultKeyAttributes;\n  }\n\n  return _extends({}, defaultKeyAttributes, key);\n}\n/*\neslint\n  no-continue: \"off\",\n*/\n\nexport { defaultBaseSortFn, matchSorter, rankings };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}